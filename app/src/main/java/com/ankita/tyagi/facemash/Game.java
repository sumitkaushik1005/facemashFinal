package com.ankita.tyagi.facemash;import android.app.Activity;import android.app.ProgressDialog;import android.graphics.Point;import android.os.AsyncTask;import android.os.Bundle;import android.view.Display;import android.view.View;import android.view.Window;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.ImageView;import android.widget.Toast;import com.android.volley.VolleyError;import com.android.volley.toolbox.ImageLoader;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;public class Game extends Activity {    int flag1 = 0;    int flag2 = 0;    static String re = null;    ImageView img3, img4;    Button button;    String srno,  gender;    int width, height;    Animation slideup, slidedown, goup, godown;    String image_url;    ProgressDialog progressDialog;    @Override    public void onBackPressed() {        super.onBackPressed();        Game.re = null;    }    //InterstitialAd interstitialAd;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        setContentView(R.layout.activity_game);        img3 = (ImageView) findViewById(R.id.imageView3);        img3.setClickable(true);        img4 = (ImageView) findViewById(R.id.imageView4);        img4.setClickable(true);        Display display = getWindowManager().getDefaultDisplay();        Point size = new Point();        display.getSize(size);        width = size.x;        height = size.y;        Bundle bundle = getIntent().getExtras();        String temp = bundle.getString("info");        String[] t = temp.split(",");        gender = t[0];        srno = t[1];//initialising animations        slideup = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slideup);        slidedown = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slidedown);        godown = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.godown);        goup = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.goup);        //   getMaxId();        new GetMaxId().execute(gender, srno);        // Toast.makeText(Game.this, Game.re, Toast.LENGTH_SHORT).show();        img3.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                img3.startAnimation(godown);                img4.startAnimation(goup);                goup.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        img3.setClickable(false);                        img4.setClickable(false);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        img3.setVisibility(View.INVISIBLE);                        img4.setVisibility(View.INVISIBLE);                        String te = Game.re;                        String temp[] = null;                        if (te != null) {                            temp = te.split(",");                        }                        String s1 = temp[0].toString();                        updateScore(s1);                        // getMaxId();                        //Toast.makeText(getBaseContext(),Game.re,Toast.LENGTH_SHORT).show();                        new GetMaxId().execute(gender, srno);                        img3.setVisibility(View.VISIBLE);                        img4.setVisibility(View.VISIBLE);                        img3.startAnimation(slideup);                        img4.startAnimation(slidedown);                        img3.setClickable(true);                        img4.setClickable(true);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }        });        img4.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                img3.startAnimation(godown);                img4.startAnimation(goup);                goup.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        img3.setClickable(false);                        img4.setClickable(false);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        img3.setVisibility(View.INVISIBLE);                        img4.setVisibility(View.INVISIBLE);                        String te = Game.re;                        String temp[] = te.split(",");                        String s2 = temp[1].toString();                        updateScore(s2);                        new GetMaxId().execute(gender, srno);                        img3.setVisibility(View.VISIBLE);                        img4.setVisibility(View.VISIBLE);                        img3.startAnimation(slideup);                        img4.startAnimation(slidedown);                        img3.setClickable(true);                        img4.setClickable(true);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }        });    }   /* private void showIntertitial() {        if (interstitialAd.isLoaded()) {            interstitialAd.show();        }    }*/    private void updateScore(String i) {        String no = i;        class UpdateScore extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String no = strings[0];                String gender = strings[1];                String url = "http://103.235.104.96/~hbtiface/facemash/updateScore.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("no", "UTF-8") + "=" + URLEncoder.encode(no, "UTF-8") + "&" +                            URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line = "";                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    return response;                } catch (Exception e) {                }                return null;            }        }        UpdateScore updateScore = new UpdateScore();        updateScore.execute(no, gender);    }      class GetMaxId extends AsyncTask<String, String, String> {        @Override        protected void onPreExecute() {            super.onPreExecute();            progressDialog = ProgressDialog.show(Game.this, "Downloading image...", "Please wait...", true, false);        }        @Override        protected String doInBackground(String... strings) {            String gender = strings[0];            String srno = strings[1];            String url = "http://103.235.104.96/~hbtiface/facemash/getMaxId.php";            try {                URL add = new URL(url);                HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                httpURLConnection.setRequestMethod("POST");                httpURLConnection.setDoOutput(true);                httpURLConnection.setDoInput(true);                OutputStream outputStream = httpURLConnection.getOutputStream();                BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                String data = URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8") + "&" +                        URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8");                bufferedWriter.write(data);                bufferedWriter.close();                InputStream inputStream = httpURLConnection.getInputStream();                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                String response = bufferedReader.readLine();                response = response.replace("\t", "");                bufferedReader.close();                inputStream.close();                httpURLConnection.disconnect();                return response;            } catch (MalformedURLException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }            return null;        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            progressDialog.dismiss();                        if (s != null) {                String temp[] = s.split(",");                String s1 = null;                String s2 = null;                if (temp[0].equals("1")) {                    Toast.makeText(Game.this, temp[1], Toast.LENGTH_LONG).show();                    finish();                }                if (temp[0].equals("0")) {                    try {                        if (!(temp[1].equals("") && temp[2].equals(""))) {                            s1 = temp[1].toString();                            s2 = temp[2].toString();                        } else {                            new GetMaxId().execute(gender, srno);                            return;                        }                    }                    catch ( Exception e){                        new GetMaxId().execute(gender,srno);                        e.printStackTrace();                        return;                    }                }                if (gender.equals("MALE")) {                    image_url = "http://103.235.104.96/~hbtiface/facemash/" + s1;                } else {                    image_url = "http://103.235.104.96/~hbtiface/facemash/" + s1;                }                ImageLoader imageLoader = AppController.getInstance().getImageLoader();                imageLoader.get(image_url, new ImageLoader.ImageListener() {                    @Override                    public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {                        img3.setImageBitmap(response.getBitmap());                    }                    @Override                    public void onErrorResponse(VolleyError error) {                    }                });                if (gender.equals("MALE")) {                    image_url = "http://103.235.104.96/~hbtiface/facemash/" + s2;                } else {                    image_url = "http://103.235.104.96/~hbtiface/facemash/" + s2;                }                imageLoader.get(image_url, new ImageLoader.ImageListener() {                    @Override                    public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {                        img4.setImageBitmap(response.getBitmap());                    }                    @Override                    public void onErrorResponse(VolleyError error) {                    }                });                Game.re = s1 + "," + s2;            }        }    }}